// <auto-generated />
using System;
using MedCenter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedCenter.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023155703_addedDiasdisponiblesmedico")]
    partial class addedDiasdisponiblesmedico
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedCenter.Models.DiaDisponibilidadMedico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool>("activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("dia_semana")
                        .HasColumnType("integer");

                    b.Property<int>("duracion_turno_minutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<TimeOnly>("hora_fin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("hora_inicio")
                        .HasColumnType("time without time zone");

                    b.Property<int>("medico_id")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("vigencia_desde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("vigencia_hasta")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("medico_id");

                    b.ToTable("diasdisponibilidadmedico", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.EntradaClinica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<string>("diagnostico")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("fecha")
                        .HasColumnType("date");

                    b.Property<int?>("historia_id")
                        .HasColumnType("integer");

                    b.Property<int?>("medico_id")
                        .HasColumnType("integer");

                    b.Property<string>("observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("tratamiento")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("turno_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("entradasclinicas_pkey");

                    b.HasIndex("historia_id");

                    b.HasIndex("medico_id");

                    b.HasIndex("turno_id");

                    b.ToTable("entradasclinicas");
                });

            modelBuilder.Entity("MedCenter.Models.Especialidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id")
                        .HasName("especialidades_pkey");

                    b.ToTable("especialidades");
                });

            modelBuilder.Entity("MedCenter.Models.HistoriaClinica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int?>("paciente_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("historiasclinicas_pkey");

                    b.HasIndex(new[] { "paciente_id" }, "historiasclinicas_paciente_id_key")
                        .IsUnique();

                    b.ToTable("historiasclinicas");
                });

            modelBuilder.Entity("MedCenter.Models.Medico", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("matricula")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id")
                        .HasName("medicos_pkey");

                    b.ToTable("medicos");
                });

            modelBuilder.Entity("MedCenter.Models.MedicoEspecialidad", b =>
                {
                    b.Property<int>("medicoId")
                        .HasColumnType("integer")
                        .HasColumnName("medico_id");

                    b.Property<int>("especialidadId")
                        .HasColumnType("integer")
                        .HasColumnName("especialidad_id");

                    b.HasKey("medicoId", "especialidadId");

                    b.HasIndex("especialidadId");

                    b.ToTable("medico_especialidad", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.MedicoObraSocial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateOnly>("fecha_desde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("fecha_hasta")
                        .HasColumnType("date");

                    b.Property<int>("medico_id")
                        .HasColumnType("integer");

                    b.Property<int>("obrasocial_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("obrasocial_id");

                    b.HasIndex("medico_id", "obrasocial_id", "activo")
                        .IsUnique()
                        .HasFilter("activo = true");

                    b.ToTable("medico_obrasocial", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.ObraSocial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool>("activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sigla")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id")
                        .HasName("obra_social_pkey");

                    b.ToTable("obrassociales", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.Paciente", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("dni")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("telefono")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("id")
                        .HasName("pacientes_pkey");

                    b.ToTable("pacientes");
                });

            modelBuilder.Entity("MedCenter.Models.PacienteObraSocial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool>("activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateOnly>("fecha_afiliacion")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("fecha_baja")
                        .HasColumnType("date");

                    b.Property<int>("numeroAfiliado")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int>("obrasocial_id")
                        .HasColumnType("integer");

                    b.Property<int>("paciente_id")
                        .HasColumnType("integer");

                    b.Property<string>("plan")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.HasIndex("obrasocial_id");

                    b.HasIndex("paciente_id", "obrasocial_id", "activa")
                        .IsUnique()
                        .HasFilter("activa = TRUE");

                    b.ToTable("paciente_obrasocial", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.Persona", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<string>("contraseña")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("nombre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id")
                        .HasName("personas_pkey");

                    b.ToTable("personas");
                });

            modelBuilder.Entity("MedCenter.Models.ReporteEstadistico", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int?>("consultor_id")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("fechadesde")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("fechahasta")
                        .HasColumnType("date");

                    b.Property<string>("tipo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id")
                        .HasName("reportesestadisticos_pkey");

                    b.HasIndex("consultor_id");

                    b.ToTable("reportesestadisticos");
                });

            modelBuilder.Entity("MedCenter.Models.Secretaria", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("legajo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id")
                        .HasName("secretarias_pkey");

                    b.ToTable("secretarias");
                });

            modelBuilder.Entity("MedCenter.Models.SlotAgenda", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool?>("disponible")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("horafin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("horainicio")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("medico_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("slotsagenda_pkey");

                    b.HasIndex("medico_id");

                    b.ToTable("slotsagenda");
                });

            modelBuilder.Entity("MedCenter.Models.Turno", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool>("es_particular")
                        .HasColumnType("boolean");

                    b.Property<int?>("especialidad_id")
                        .HasColumnType("integer");

                    b.Property<string>("estado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time without time zone");

                    b.Property<int>("medico_id")
                        .HasColumnType("integer");

                    b.Property<string>("motivo_cancelacion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("paciente_id")
                        .HasColumnType("integer");

                    b.Property<int?>("pacienteobrasocial_id")
                        .HasColumnType("integer");

                    b.Property<int?>("secretaria_id")
                        .HasColumnType("integer");

                    b.Property<int?>("slot_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("turnos_pkey");

                    b.HasIndex("especialidad_id");

                    b.HasIndex("medico_id");

                    b.HasIndex("paciente_id");

                    b.HasIndex("pacienteobrasocial_id");

                    b.HasIndex("secretaria_id");

                    b.HasIndex("slot_id");

                    b.ToTable("turnos");
                });

            modelBuilder.Entity("RoleKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_key");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("role_keys", (string)null);
                });

            modelBuilder.Entity("MedCenter.Models.DiaDisponibilidadMedico", b =>
                {
                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("diasDisponibliesMedico")
                        .HasForeignKey("medico_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("diadisponibilidadmedico_medico_fkey");

                    b.Navigation("medico");
                });

            modelBuilder.Entity("MedCenter.Models.EntradaClinica", b =>
                {
                    b.HasOne("MedCenter.Models.HistoriaClinica", "historia")
                        .WithMany("EntradasClinicas")
                        .HasForeignKey("historia_id")
                        .HasConstraintName("entradasclinicas_historia_id_fkey");

                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("entradasClinicas")
                        .HasForeignKey("medico_id")
                        .HasConstraintName("entradasclinicas_medico_id_fkey");

                    b.HasOne("MedCenter.Models.Turno", "turno")
                        .WithMany("entradasClinicas")
                        .HasForeignKey("turno_id")
                        .HasConstraintName("entradasclinicas_turno_id_fkey");

                    b.Navigation("historia");

                    b.Navigation("medico");

                    b.Navigation("turno");
                });

            modelBuilder.Entity("MedCenter.Models.HistoriaClinica", b =>
                {
                    b.HasOne("MedCenter.Models.Paciente", "paciente")
                        .WithOne("historiasclinicas")
                        .HasForeignKey("MedCenter.Models.HistoriaClinica", "paciente_id")
                        .HasConstraintName("historiasclinicas_paciente_id_fkey");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("MedCenter.Models.Medico", b =>
                {
                    b.HasOne("MedCenter.Models.Persona", "idNavigation")
                        .WithOne("Medico")
                        .HasForeignKey("MedCenter.Models.Medico", "id")
                        .IsRequired()
                        .HasConstraintName("medicos_id_fkey");

                    b.Navigation("idNavigation");
                });

            modelBuilder.Entity("MedCenter.Models.MedicoEspecialidad", b =>
                {
                    b.HasOne("MedCenter.Models.Especialidad", "especialidad")
                        .WithMany("medicoEspecialidades")
                        .HasForeignKey("especialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("medicoEspecialidades")
                        .HasForeignKey("medicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("especialidad");

                    b.Navigation("medico");
                });

            modelBuilder.Entity("MedCenter.Models.MedicoObraSocial", b =>
                {
                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("medicosObraSociales")
                        .HasForeignKey("medico_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("medico_obrasocial_medico_fkey");

                    b.HasOne("MedCenter.Models.ObraSocial", "obrasocial")
                        .WithMany("medicosObrasSociales")
                        .HasForeignKey("obrasocial_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("medico_obrasocial_obrasocial_fkey");

                    b.Navigation("medico");

                    b.Navigation("obrasocial");
                });

            modelBuilder.Entity("MedCenter.Models.Paciente", b =>
                {
                    b.HasOne("MedCenter.Models.Persona", "idNavigation")
                        .WithOne("Paciente")
                        .HasForeignKey("MedCenter.Models.Paciente", "id")
                        .IsRequired()
                        .HasConstraintName("pacientes_id_fkey");

                    b.Navigation("idNavigation");
                });

            modelBuilder.Entity("MedCenter.Models.PacienteObraSocial", b =>
                {
                    b.HasOne("MedCenter.Models.ObraSocial", "obrasocial")
                        .WithMany("pacientesObrasSociales")
                        .HasForeignKey("obrasocial_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("paciente_obrasocial_obrasocial_fkey");

                    b.HasOne("MedCenter.Models.Paciente", "Paciente")
                        .WithMany("pacientesObrasSociales")
                        .HasForeignKey("paciente_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("paciente_obrasocial_paciente_fkey");

                    b.Navigation("Paciente");

                    b.Navigation("obrasocial");
                });

            modelBuilder.Entity("MedCenter.Models.ReporteEstadistico", b =>
                {
                    b.HasOne("MedCenter.Models.Persona", "consultor")
                        .WithMany("reportesestadisticos")
                        .HasForeignKey("consultor_id")
                        .HasConstraintName("reportesestadisticos_consultor_id_fkey");

                    b.Navigation("consultor");
                });

            modelBuilder.Entity("MedCenter.Models.Secretaria", b =>
                {
                    b.HasOne("MedCenter.Models.Persona", "idNavigation")
                        .WithOne("Secretaria")
                        .HasForeignKey("MedCenter.Models.Secretaria", "id")
                        .IsRequired()
                        .HasConstraintName("secretarias_id_fkey");

                    b.Navigation("idNavigation");
                });

            modelBuilder.Entity("MedCenter.Models.SlotAgenda", b =>
                {
                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("slotsAgenda")
                        .HasForeignKey("medico_id")
                        .HasConstraintName("slotsagenda_medico_id_fkey");

                    b.Navigation("medico");
                });

            modelBuilder.Entity("MedCenter.Models.Turno", b =>
                {
                    b.HasOne("MedCenter.Models.Especialidad", "especialidad")
                        .WithMany("turnos")
                        .HasForeignKey("especialidad_id")
                        .HasConstraintName("turnos_especialidad_id_fkey");

                    b.HasOne("MedCenter.Models.Medico", "medico")
                        .WithMany("turnos")
                        .HasForeignKey("medico_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("turnos_medico_id_fkey");

                    b.HasOne("MedCenter.Models.Paciente", "paciente")
                        .WithMany("turnos")
                        .HasForeignKey("paciente_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("turnos_paciente_id_fkey");

                    b.HasOne("MedCenter.Models.PacienteObraSocial", "paciente_obrasocial")
                        .WithMany("turnos")
                        .HasForeignKey("pacienteobrasocial_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("turno_paciente_obrasocial_fkey");

                    b.HasOne("MedCenter.Models.Secretaria", "secretaria")
                        .WithMany("turnos")
                        .HasForeignKey("secretaria_id")
                        .HasConstraintName("turnos_secretaria_id_fkey");

                    b.HasOne("MedCenter.Models.SlotAgenda", "slot")
                        .WithMany("turnos")
                        .HasForeignKey("slot_id")
                        .HasConstraintName("turnos_slot_id_fkey");

                    b.Navigation("especialidad");

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("paciente_obrasocial");

                    b.Navigation("secretaria");

                    b.Navigation("slot");
                });

            modelBuilder.Entity("MedCenter.Models.Especialidad", b =>
                {
                    b.Navigation("medicoEspecialidades");

                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.HistoriaClinica", b =>
                {
                    b.Navigation("EntradasClinicas");
                });

            modelBuilder.Entity("MedCenter.Models.Medico", b =>
                {
                    b.Navigation("diasDisponibliesMedico");

                    b.Navigation("entradasClinicas");

                    b.Navigation("medicoEspecialidades");

                    b.Navigation("medicosObraSociales");

                    b.Navigation("slotsAgenda");

                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.ObraSocial", b =>
                {
                    b.Navigation("medicosObrasSociales");

                    b.Navigation("pacientesObrasSociales");
                });

            modelBuilder.Entity("MedCenter.Models.Paciente", b =>
                {
                    b.Navigation("historiasclinicas");

                    b.Navigation("pacientesObrasSociales");

                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.PacienteObraSocial", b =>
                {
                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.Persona", b =>
                {
                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Secretaria");

                    b.Navigation("reportesestadisticos");
                });

            modelBuilder.Entity("MedCenter.Models.Secretaria", b =>
                {
                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.SlotAgenda", b =>
                {
                    b.Navigation("turnos");
                });

            modelBuilder.Entity("MedCenter.Models.Turno", b =>
                {
                    b.Navigation("entradasClinicas");
                });
#pragma warning restore 612, 618
        }
    }
}
